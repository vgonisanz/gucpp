//===================================================================================
//  CMake configuration file, based on SDL 2 version header
//
//  ** File generated automatically, do not modify **
//
// ===================================================================================

#pragma once

#include <string>
#include <sstream>

namespace threemonkeybits
{
  /**
 *  \brief Information the version of GUCpp in use.
 *
 *  Represents the library's version as three levels: major revision
 *  (increments with massive changes, additions, and enhancements),
 *  minor revision (increments with backwards-compatible changes to the
 *  major revision), and patchlevel (increments with fixes to the minor
 *  revision).
 *
 *  \sa GUCpp_VERSION
 *  \sa GUCpp_GetVersion
 */
typedef struct GUCpp_version
{
    int major;        /**< major version */
    int minor;        /**< minor version */
    int patch;        /**< update version */
} GUCpp_version;

/* Printable format: "%d.%d.%d", MAJOR, MINOR, PATCHLEVEL
*/
#define GUCpp_MAJOR_VERSION   0
#define GUCpp_MINOR_VERSION   1
#define GUCpp_PATCHLEVEL      0

/**
 *  \brief Macro to determine GUCpp version program was compiled against.
 *
 *  This macro fills in a GUCpp_version structure with the version of the
 *  library you compiled against. This is determined by what header the
 *  compiler uses. Note that if you dynamically linked the library, you might
 *  have a slightly newer or older version at runtime. That version can be
 *  determined with GUCpp_GetVersion(), which, unlike GUCpp_VERSION(),
 *  is not a macro.
 *
 *  \param x A pointer to a GUCpp_version struct to initialize.
 *
 *  \sa GUCpp_version
 *  \sa GUCpp_GetVersion
 */
#define GUCpp_VERSION(x)                          \
{                                   \
    (x)->major = GUCpp_MAJOR_VERSION;                 \
    (x)->minor = GUCpp_MINOR_VERSION;                 \
    (x)->patch = GUCpp_PATCHLEVEL;                    \
}

/**
 *  This macro turns the version numbers into a numeric value:
 *  \verbatim
    (1,2,3) -> (1203)
    \endverbatim
 *
 *  This assumes that there will never be more than 100 patchlevels.
 */
#define GUCpp_VERSIONNUM(X, Y, Z)                     \
    ((X)*1000 + (Y)*100 + (Z))

/**
 *  This is the version number macro for the current GUCpp version.
 */
#define GUCpp_COMPILEDVERSION \
    GUCpp_VERSIONNUM(GUCpp_MAJOR_VERSION, GUCpp_MINOR_VERSION, GUCpp_PATCHLEVEL)

/**
 *  This macro will evaluate to true if compiled with GUCpp at least X.Y.Z.
 */
#define GUCpp_VERSION_ATLEAST(X, Y, Z) \
    (GUCpp_COMPILEDVERSION >= GUCpp_VERSIONNUM(X, Y, Z))

}

// Paths
#cmakedefine GUCpp_PATH_MAIN "@GUCpp_PATH_MAIN@"
